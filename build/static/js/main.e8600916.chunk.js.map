{"version":3,"sources":["images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","images/no_image.jpg","API.js","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","helpers.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","TMDBLogoImg","img","Header","to","src","TMDBLogo","alt","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","Spinner","SearchBar","state","value","timeout","_prevProps","prevState","this","setSearchTerm","props","clearTimeout","setTimeout","searchIcon","type","placeholder","onChange","event","setState","currentTarget","Component","button","Button","callback","onClick","defaultConfig","method","headers","API","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","initialState","results","total_pages","total_results","Home","movies","isLoadingMore","loading","error","prev","handleSearch","handleLoadMore","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","params","credits","crew","filter","member","job","actors","cast","runtime","actor","profile_path","MovieWithParams","useParams","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8600916.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tmdb_logo.e7029961.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  max-width: var(--maxWidth);\r\n  padding: 20px 0;\r\n  margin: 0 auto;\r\n`;\r\n\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n  width: 100px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 80px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\n\r\nimport { Wrapper, Content, TMDBLogoImg } from './Header.styles';\r\n\r\nconst Header = () => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to='/'>\r\n         <h1>Krishna Bansal</h1>\r\n      </Link>\r\n      <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Header;\r\n","// Configuration for TMDB API\r\n// Read more about the API here: https://developers.themoviedb.org/\r\n\r\nconst API_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\r\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\r\n// For login and voting\r\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\r\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\r\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\r\n\r\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\r\n// Sizes: w300, w780, w1280, original\r\nconst BACKDROP_SIZE = 'w1280';\r\n// w92, w154, w185, w342, w500, w780, original\r\nconst POSTER_SIZE = 'w780';\r\n\r\nexport {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  IMAGE_BASE_URL,\r\n  BACKDROP_SIZE,\r\n  POSTER_SIZE,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: linear-gradient(\r\n      to bottom,\r\n      rgba(0, 0, 0, 0) 41%,\r\n      rgba(0, 0, 0, 0.65) 100%\r\n    ),\r\n    url(${({ image }) => image}), var(--darkGrey);\r\n  background-size: 100%, cover;\r\n  background-position: center;\r\n  height: 600px;\r\n  position: relative;\r\n  animation: animateHeroImage 1s;\r\n\r\n  @keyframes animateHeroImage {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 20px;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  z-index: 100;\r\n  max-width: 700px;\r\n  position: absolute;\r\n  bottom: 40px;\r\n  margin-right: 20px;\r\n  min-height: 100px;\r\n  color: var(--white);\r\n\r\n  h1 {\r\n    font-size: var(--fontSuperBig);\r\n\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-size: var(--fontMed);\r\n\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 720px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Wrapper, Content, Text } from './HeroImage.styles';\r\n\r\nconst HeroImage = ({ image, title, text }) => (\r\n  <Wrapper image={image}>\r\n    <Content>\r\n      <Text>\r\n        <h1>{title}</h1>\r\n        <p>{text}</p>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nHeroImage.propTypes = {\r\n  image: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default HeroImage;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n\r\n  h1 {\r\n    color: var(--medGrey);\r\n\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap: 2rem;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Wrapper, Content } from './Grid.styles';\r\n\r\nconst Grid = ({ header, children }) => (\r\n  <Wrapper>\r\n    <h1>{header}</h1>\r\n    <Content>{children}</Content>\r\n  </Wrapper>\r\n);\r\n\r\nGrid.propTypes = {\r\n  header: PropTypes.string\r\n};\r\n\r\nexport default Grid;\r\n","import styled from 'styled-components';\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  max-width: 720px;\r\n  transition: all 0.3s;\r\n  object-fit: cover;\r\n  border-radius: 20px;\r\n  animation: animateThumb 0.5s;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  @keyframes animateThumb {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n// Styles\r\nimport { Image } from './Thumb.styles';\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n  <div>\r\n    {clickable ? (\r\n      <Link to={`/${movieId}`}>\r\n        <Image src={image} alt='movie-thumb' />\r\n      </Link>\r\n    ) : (\r\n      <Image src={image} alt='movie-thumb' />\r\n    )}\r\n  </div>\r\n);\r\n\r\nThumb.propTypes = {\r\n  image: PropTypes.string,\r\n  movieId: PropTypes.number,\r\n  clickable: PropTypes.bool\r\n};\r\n\r\nexport default Thumb;\r\n","import { Spinner } from './Spinner.styles';\r\n\r\nexport default Spinner;\r\n","import styled from 'styled-components';\r\n\r\nexport const Spinner = styled.div`\r\n  border: 5px solid var(--lightGrey);\r\n  border-top: 5px solid var(--medGrey);\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n  animation: spin 0.8s linear infinite;\r\n  margin: 20px auto;\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/search-icon.bb4c697f.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: relative;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  height: 55px;\r\n  background: var(--medGrey);\r\n  margin: 0 auto;\r\n  border-radius: 40px;\r\n  color: var(--white);\r\n\r\n  img {\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 14px;\r\n    width: 30px;\r\n  }\r\n\r\n  input {\r\n    font-size: var(--fontBig);\r\n    position: absolute;\r\n    left: 0;\r\n    margin: 8px 0;\r\n    padding: 0 0 0 60px;\r\n    border: 0;\r\n    width: 95%;\r\n    background: transparent;\r\n    height: 40px;\r\n    color: var(--white);\r\n\r\n    :focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Image\r\nimport searchIcon from '../../images/search-icon.svg';\r\n// Styles\r\nimport { Wrapper, Content } from './SearchBar.styles';\r\n\r\nclass SearchBar extends Component {\r\n  state = { value: '' };\r\n  timeout = null;\r\n\r\n  componentDidUpdate(_prevProps, prevState) {\r\n    if (this.state.value !== prevState.value) {\r\n      const { setSearchTerm } = this.props;\r\n\r\n      clearTimeout(this.timeout);\r\n\r\n      this.timeout = setTimeout(() => {\r\n        const { value } = this.state;\r\n        setSearchTerm(value);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <Wrapper>\r\n        <Content>\r\n          <img src={searchIcon} alt='search-icon' />\r\n          <input\r\n            type='text'\r\n            placeholder='Search Movie'\r\n            onChange={event => this.setState({ value: event.currentTarget.value })}\r\n            value={value}\r\n          />\r\n        </Content>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nSearchBar.propTypes = {\r\n  callback: PropTypes.func\r\n};\r\n\r\nexport default SearchBar;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.button`\r\n  display: block;\r\n  background: var(--darkGrey);\r\n  width: 25%;\r\n  min-width: 200px;\r\n  height: 60px;\r\n  border-radius: 30px;\r\n  color: var(--white);\r\n  border: 0;\r\n  font-size: var(--fontBig);\r\n  margin: 20px auto;\r\n  transition: all 0.3s;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Wrapper } from './Button.styles';\r\n\r\nconst Button = ({ text, callback }) => (\r\n  <Wrapper type='button' onClick={callback}>\r\n    {text}\r\n  </Wrapper>\r\n);\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string,\r\n  callback: PropTypes.func\r\n};\r\n\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n} from './config';\r\n\r\nconst defaultConfig = {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n};\r\n\r\nconst API = {\r\n  fetchMovies: async (searchTerm, page) => {\r\n    const endpoint = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchMovie: async (movieId) => {\r\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchCredits: async (movieId) => {\r\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n  // Bonus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n  authenticate: async (requestToken, username, password) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken,\r\n    };\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData),\r\n      })\r\n    ).json();\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken }),\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n};\r\n\r\nexport default API;\r\n","import React, { Component } from 'react';\r\n// Config\r\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config';\r\n// Components\r\nimport HeroImage from './HeroImage';\r\nimport Grid from './Grid';\r\nimport Thumb from './Thumb';\r\nimport Spinner from './Spinner';\r\nimport SearchBar from './SearchBar';\r\nimport Button from './Button';\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\n// API\r\nimport API from '../API';\r\n\r\nconst initialState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  total_results: 0\r\n};\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    movies: initialState,\r\n    searchTerm: '',\r\n    isLoadingMore: false,\r\n    loading: false,\r\n    error: false\r\n  };\r\n\r\n  fetchMovies = async (page, searchTerm = '') => {\r\n    try {\r\n      this.setState({ error: false, loading: true });\r\n\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n      this.setState(prev => ({\r\n        ...prev,\r\n        movies: {\r\n          ...movies,\r\n          results:\r\n            page > 1\r\n              ? [...prev.movies.results, ...movies.results]\r\n              : [...movies.results]\r\n        },\r\n        loading: false\r\n      }));\r\n    } catch (error) {\r\n      this.setState({ error: true, loading: false });\r\n    }\r\n  };\r\n\r\n  handleSearch = searchTerm =>\r\n    this.setState({ movies: initialState, searchTerm }, () =>\r\n      this.fetchMovies(1, this.state.searchTerm)\r\n    );\r\n\r\n  handleLoadMore = () =>\r\n    this.fetchMovies(this.state.movies.page + 1, this.state.searchTerm);\r\n\r\n  componentDidMount() {\r\n    this.fetchMovies(1);\r\n  }\r\n\r\n  render() {\r\n    const { searchTerm, movies, loading, error } = this.state;\r\n\r\n    if (error) return <div>Something went wrong ...</div>;\r\n\r\n    return (\r\n      <>\r\n        {!searchTerm && movies.results[0] ? (\r\n          <HeroImage\r\n            image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${movies.results[0].backdrop_path}`}\r\n            title={movies.results[0].original_title}\r\n            text={movies.results[0].overview}\r\n          />\r\n        ) : null}\r\n        <SearchBar setSearchTerm={this.handleSearch} />\r\n        <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\r\n          {movies.results.map(movie => (\r\n            <Thumb\r\n              key={movie.id}\r\n              clickable\r\n              image={\r\n                movie.poster_path\r\n                  ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                  : NoImage\r\n              }\r\n              movieId={movie.id}\r\n            />\r\n          ))}\r\n        </Grid>\r\n        {loading && <Spinner />}\r\n        {movies.page < movies.total_pages && !loading && (\r\n          <Button text='Load More' callback={this.handleLoadMore} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 70px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: var(--maxWidth);\r\n  padding: 0 20px;\r\n\r\n  span {\r\n    font-size: var(--fontMed);\r\n    color: var(--white);\r\n    padding-right: 10px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n// Styles\r\nimport { Wrapper, Content } from './BreadCrumb.styles';\r\n\r\nconst BreadCrumb = ({ movieTitle }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to='/'>\r\n        <span>Home</span>\r\n      </Link>\r\n      <span>|</span>\r\n      <span>{movieTitle}</span>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nBreadCrumb.propTypes = {\r\n  movieTitle: PropTypes.string\r\n};\r\n\r\nexport default BreadCrumb;\r\n","import styled from 'styled-components';\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: ${({ backdrop }) =>\r\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\r\n  background-size: cover;\r\n  background-position: center;\r\n  padding: 40px 20px;\r\n  animation: animateMovieInfo 1s;\r\n\r\n  @keyframes animateMovieInfo {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  border-radius: 20px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    max-height: none;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n  color: var(--white);\r\n  overflow: hidden;\r\n\r\n  .rating-directors {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .score {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 35px;\r\n    height: 35px;\r\n    background: #fff;\r\n    color: #000;\r\n    font-weight: 800;\r\n    border-radius: 50%;\r\n    margin: 0;\r\n  }\r\n\r\n  .director {\r\n    margin: 0 0 0 40px;\r\n\r\n    p {\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  h1 {\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport Thumb from '../Thumb';\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\r\n// Image\r\nimport NoImage from '../../images/no_image.jpg';\r\n// Styles\r\nimport { Wrapper, Content, Text } from './MovieInfo.styles';\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n  <Wrapper backdrop={movie.backdrop_path}>\r\n    <Content>\r\n      <Thumb\r\n        image={\r\n          movie.poster_path\r\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n            : NoImage\r\n        }\r\n        clickable={false}\r\n      />\r\n      <Text>\r\n        <h1>{movie.title}</h1>\r\n        <h3>PLOT</h3>\r\n        <p>{movie.overview}</p>\r\n\r\n        <div className='rating-directors'>\r\n          <div>\r\n            <h3>RATING</h3>\r\n            <div className='score'>{movie.vote_average}</div>\r\n          </div>\r\n          <div className='director'>\r\n            <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\r\n            {movie.directors.map(director => (\r\n              <p key={director.credit_id}>{director.name}</p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nMovieInfo.propTypes = {\r\n  movie: PropTypes.object\r\n}\r\n\r\nexport default MovieInfo;\r\n","// Convert time to hours and minutes\r\nexport const calcTime = time => {\r\n  const hours = Math.floor(time / 60);\r\n  const mins = time % 60;\r\n  return `${hours}h ${mins}m`;\r\n};\r\n// Convert a number to money formatting\r\nexport const convertMoney = money => {\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0\r\n  });\r\n  return formatter.format(money);\r\n};\r\n\r\nexport const isPersistedState = stateName => {\r\n  const sessionState = sessionStorage.getItem(stateName);\r\n  return sessionState && JSON.parse(sessionState);\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  min-height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  margin: 0 auto;\r\n\r\n  .column {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: var(--medGrey);\r\n    border-radius: 20px;\r\n    margin: 0 20px;\r\n    flex: 1;\r\n\r\n    :first-child {\r\n      margin-left: 0;\r\n    }\r\n\r\n    :last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n\r\n    .column {\r\n      margin: 20px 0;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Helpers\r\nimport { calcTime, convertMoney } from '../../helpers';\r\n// Styles\r\nimport { Wrapper, Content } from './MovieInfoBar.styles';\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <div className='column'>\r\n        <p>Running time: {calcTime(time)}</p>\r\n      </div>\r\n      <div className='column'>\r\n        <p>Budget: {convertMoney(budget)}</p>\r\n      </div>\r\n      <div className='column'>\r\n        <p>Revenue: {convertMoney(revenue)}</p>\r\n      </div>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nMovieInfoBar.propTypes = {\r\n  time: PropTypes.number,\r\n  budget: PropTypes.number,\r\n  revenue: PropTypes.number\r\n};\r\n\r\nexport default MovieInfoBar;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  color: var(--white);\r\n  background: var(--darkGrey);\r\n  border-radius: 20px;\r\n  padding: 5px;\r\n  text-align: center;\r\n\r\n  h3 {\r\n    margin: 10px 0 0 0;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 15px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Styles\r\nimport { Wrapper, Image } from './Actor.styles';\r\n\r\nconst Actor = ({ name, character, imageUrl }) => (\r\n  <Wrapper>\r\n    <Image src={imageUrl} alt='actor-thumb' />\r\n    <h3>{name}</h3>\r\n    <p>{character}</p>\r\n  </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n  name: PropTypes.string,\r\n  character: PropTypes.string,\r\n  imageUrl: PropTypes.string,\r\n}\r\n\r\nexport default Actor;\r\n","import React, { Component } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// Config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\r\n// Components\r\nimport BreadCrumb from './BreadCrumb';\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from './MovieInfoBar';\r\nimport Actor from './Actor';\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\nimport API from '../API';\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    movie: {},\r\n    loading: true,\r\n    error: false\r\n  };\r\n\r\n  fetchMovie = async () => {\r\n    const { movieId } = this.props.params;\r\n\r\n    try {\r\n      this.setState({ error: false, loading: true });\r\n\r\n      const movie = await API.fetchMovie(movieId);\r\n      const credits = await API.fetchCredits(movieId);\r\n      // Get directors only\r\n      const directors = credits.crew.filter(\r\n        member => member.job === 'Director'\r\n      );\r\n\r\n      this.setState({\r\n        movie: {\r\n          ...movie,\r\n          actors: credits.cast,\r\n          directors\r\n        },\r\n        loading: false\r\n      });\r\n    } catch (error) {\r\n      this.setState({ error: true, loading: false });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchMovie();\r\n  }\r\n\r\n  render() {\r\n    const { movie, loading, error } = this.state;\r\n\r\n    if (loading) return <Spinner />;\r\n    if (error) return <div>Something went wrong...</div>;\r\n\r\n    return (\r\n      <>\r\n        <BreadCrumb movieTitle={movie.original_title} />\r\n        <MovieInfo movie={movie} />\r\n        <MovieInfoBar\r\n          time={movie.runtime}\r\n          budget={movie.budget}\r\n          revenue={movie.revenue}\r\n        />\r\n        <Grid header='Actors'>\r\n          {movie.actors.map(actor => (\r\n            <Actor\r\n              key={actor.credit_id}\r\n              name={actor.name}\r\n              character={actor.character}\r\n              imageUrl={\r\n                actor.profile_path\r\n                  ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                  : NoImage\r\n              }\r\n            />\r\n          ))}\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst MovieWithParams = props => <Movie {...props} params={useParams()} />;\r\n\r\nexport default MovieWithParams;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => <div>NotFound</div>;\r\n\r\nexport default NotFound;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --maxWidth: 1280px;\r\n    --white: #fff;\r\n    --lightGrey: #f3f3f3;\r\n    --medGrey: #F21170;\r\n    --darkGrey: #72147E;\r\n    --fontSuperBig: 2.5rem;\r\n    --fontBig: 1.5rem;\r\n    --fontMed: 1.2rem;\r\n    --fontSmall: 1rem;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Abel', sans-serif;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    \r\n    h1 {\r\n      font-size: 2rem;\r\n      font-weight: 600;\r\n      color: var(--white);\r\n    }\r\n\r\n    h3 {\r\n      font-size: 1.1rem;\r\n      font-weight: 600;\r\n    }\r\n\r\n    p {\r\n      font-size: 1rem;\r\n      color: var(--white);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n// Routing\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n// Components\r\nimport Header from './components/Header';\r\nimport Home from './components/Home';\r\nimport Movie from './components/Movie';\r\nimport NotFound from './components/NotFound';\r\n\r\n// Styles\r\nimport { GlobalStyle } from './GlobalStyle';\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <Header />\r\n    <Routes>\r\n      <Route path='/' element={<Home />} />\r\n      <Route path='/:movieId' element={<Movie />} />\r\n      <Route path='/*' element={<NotFound />} />\r\n    </Routes>\r\n    <GlobalStyle />\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}